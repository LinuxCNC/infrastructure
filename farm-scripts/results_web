#!/bin/bash
#
# usage: results_web <build_dir> PASS|FAIL
#
# This script is passed the name of a directory that contains
# a build log (as generated by check_build) and the result of
# that build (PASS or FAIL).  It uploads the build log to the
# compile farm website, and updates the main compile farm
# status page.
#
# It assumes that the file "sysname" contains a short system
# name and "slot" contains the slot number.
#
# The script prints some messages to $LOGFILE, or stdout if
# $LOGFILE is undefined

# Function to write a message to $LOGFILE or stdout

function MSG {
    if [ -z $LOGFILE ] ; then 
        echo `date -u "+%F %T results_web: $BUILD_DIR : $1"`
    else
        date -u "+%F %T results_web: $BUILD_DIR : $1" >>$LOGFILE
    fi
}

# Function to upload a file to the farm directory at linuxcnc.org.
#
# usage  UPLOAD <srcname> <dstname>
#
# dstname should be a name only, not a path.  Any output from scp 
# is saved to scp_log (handy for troubleshooting).
#
function UPLOAD {
    SRCFILE=$1
    DSTFILE=$2
    # first remove any old scp_log file that is laying around
    rm -f scp_log
    # number of retries before giving up
    LOOP=3
    MSG "uploading $DSTFILE"
    while [ $LOOP -gt 0 ] ; do
        # start a subshell, enable job control
        ( set -m
        # start a "watchdog timer" in the background, save its pid
        sleep 120 & timerpid=$!
        # start the upload, kill watchdog on completion, run in background
        ( scp $SRCFILE $UPLOAD_DIR/$DSTFILE 1>>scp_log 2>>scp_log && echo "SCP_SUCCESS" >>scp_log ; kill $timerpid ) &
        # wait for timeout (or for scp to finish and kill the timer, which normally happens)
        wait $timerpid
        # if the scp job is still going, kill it
        kill %+
        # end subshell, discard job completion notification messages
        ) 2>/dev/null
        # check log to see if scp succeeded
        if grep -q SCP_SUCCESS scp_log ; then 
            break
        fi
        LOOP=$((${LOOP}-1))
        MSG retry
    done
    if [ $LOOP -eq 0 ] ; then
        MSG "scp upload failed"
        return -1
    fi
    return 0
    }


# main script starts here

if [ -z $1 ] ; then
    MSG "no directory specified"
    exit -1
fi
BUILD_DIR=$1
BUILD_NAME=`echo $BUILD_DIR | sed s#^.*/##`
echo "DIR is $BUILD_DIR"
echo "NAME is $BUILD_NAME"
if [ ! -f sysname  ] ; then
    MSG "sysname: file not found"
    exit -1
else
    SYSNAME=`cat sysname`
fi
if [ ! -f slot  ] ; then
    MSG "slot: file not found"
    exit -1
else
    SLOT=`cat slot`
fi
if [ -z $2 ] ; then
    MSG "no result specified"
    exit -1
fi
RESULT=$2
echo "RESULT is $RESULT"
if [ "$RESULT" = "PASS" ] ; then
    IMAGE=pass.png
    ALTTEXT=PASSED
elif [ "$RESULT" = "FAIL" ] ; then
    IMAGE=fail.png
    ALTTEXT=FAILED
else
    MSG "$RESULT: invalid result specified"
    exit -1
fi
if [ ! -d $BUILD_DIR  ] ; then
    MSG "no such directory"
    exit -1
fi
if [ ! -f $BUILD_DIR/build_log ] ; then
    MSG "build_log: file not found"
    exit -1
fi
if [ ! -f $BUILD_DIR/history_log ] ; then
    MSG "history_log: file not found"
    exit -1
fi
BUILD_DATE=`tail -n 1 $BUILD_DIR/history_log | sed s/PASSED// | sed s/FAILED//`
# create SSI file (to be included in main webpage)
echo "<td>$SLOT</td><td><a href=\"${BUILD_NAME}_slot${SLOT}_history.txt\">${SYSNAME} (`uname -r`)</a></td><td><a href=\"${BUILD_NAME}_slot${SLOT}_log.txt\">$BUILD_DATE</a></td><td><img src=\"${IMAGE}\" alt=\"${ALTTEXT}\"></td>" >temp.ssi

UPLOAD_DIR=jmkasunich@linuxcnc.org:compile_farm

UPLOAD $BUILD_DIR/build_log ${BUILD_NAME}_slot${SLOT}_log.txt
UPLOAD $BUILD_DIR/history_log ${BUILD_NAME}_slot${SLOT}_history.txt
UPLOAD temp.ssi ${BUILD_NAME}_slot${SLOT}.ssi
rm temp.ssi

MSG "done"



