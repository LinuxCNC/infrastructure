#!/bin/bash
#
# usage: check_build <build_dir>
#
# This script is passed the name of a directory that contains
# a cvs checkout.  It switches to that directory and looks for a
# script called 'farm_build'.  It executes that script, saving
# all output in 'build_log', and returns success or or failure
# based on the result.
#
# The script prints some messages to $LOGFILE, or stdout if
# $LOGFILE is undefined

# Function to write a message to $LOGFILE or stdout

function MSG {
    if [ -z $LOGFILE ] ; then 
        echo `date -u "+%F %T check_build: $BUILD_DIR : $1"`
    else
        date -u "+%F %T check_build: $BUILD_DIR : $1" >>$LOGFILE
    fi
}

# main script starts here

if [ -z $1 ] ; then
    MSG "no directory specified"
    exit -1
fi
BUILD_DIR=$1
if [ ! -d $BUILD_DIR  ] ; then
    MSG "no such directory"
    exit -1
fi
OLD_DIR=`pwd`
cd $BUILD_DIR 
if [ ! -f farm_build ] ; then
    MSG "farm_build: file not found"
    exit -1
fi
MSG "start build"
# make a header for the build log
echo >build_log
echo "BUILD_DIR : $BUILD_DIR " >>build_log
echo "SYSTEM:  $SYSTEM (farm slot $SLOT)" >>build_log
echo >>build_log
date -u +"build started at %F %T" >>build_log
echo >>build_log
# do the build
if ./farm_build 1>>build_log 2>>build_log; then
    # succeeded
    echo >>build_log
    date -u +"build completed successfully at %F %T" >>build_log
    echo >>build_log
    date -u +"%F %T PASSED" >>history_log
    MSG "succeeded"
    exit 0
else
    # failed
    echo >>build_log
    date -u +"build failed at %F %T" >>build_log
    echo >>build_log
    date -u +"%F %T FAILED" >>history_log
    MSG "failed"
    exit -1
fi

